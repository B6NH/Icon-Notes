
# Icon Programming for Humanists

global letters, limit, chartable,
       A, a, B, b, C, c, D, d, E, e, F, f, impermissible,
       values, x_min, x_range, y_min, y_range, nouns, verbs

# Save word lengths in list
procedure word_lengths(line)

  local length

  letters := list(10,0)

  line ? while length := *tab(many(&letters)) do {
    tab(many(' .,;:!'))
    letters[length] +:= 1
  }

  return

end

# Display values from global list letters
procedure printout()

  local n

  every n := 1 to 10 do write("There are ",letters[n]," ",n,"-letter words.")

  return

end

procedure dispChars()

  local n

  # Display characters
  every n := 0 to 255 do {
    writes(right(n,3) ,"=" ,char(n)," ")
    if n % 13 = 0 then write()
  }

  return

end

# Show histogram of letters
procedure histogram()

  local n, p

  every n := 30 to 1 by -1 do {
    writes(repl(" ",10))
    every p := 1 to 10 do writes(if letters[p] >= n then "X" else " ")
    write()
  }

  return

end

procedure getword(filename)

  local chars, punct, filvar, line, word

  # Initialize sets
  chars := (&letters ++ &digits ++ '\'-')
  punct := ' .,?";:!'

  # Open file
  filvar := open(filename)

  # Read lines
  while line := read(filvar) do {
    line ? {

      # Skip blanks
      tab(many(' '))

      # Read word
      while word := tab(many(chars)) do {

        # Skip punctuation
        tab(many(punct))

        # Return one word
        suspend word

      }

    }

  }

  # Close file
  close(filvar)

  # Procedure must fail
  # ...

end

# Number of words in file
procedure countfile(filename)

  local total

  total := 0

  every getword(filename) do total +:= 1

  return total

end

procedure modesMeansMedians(filename)

  local filelength, section, counter, letters, word

  # File length
  filelength := countfile(filename)

  # Section size
  limit := (filelength / 3)

  # Number of sections
  section := 0

  # Word counter
  counter := 0

  # Frequencies
  letters := list(20,0)

  # Read words
  every word := getword(filename) do {

    # Increment number of words of this size
    letters[*word] +:= 1
    counter +:= 1

    # Next section
    if counter = limit then {

      # Display section
      printSection(section +:= 1, letters)
      printMean(section,letters)
      printMedian(section,letters)

      # Reset variables
      letters := list(20,0)
      counter := 0

    }

  }

  return

end

procedure printSection(p, L)

  local greatest, n, mode

  greatest := 0

  write("Section no. ", p, ".")
  write("Length Number Such")

  # Find most frequent value
  every n := 20 to 1 by -1 do {

    # Show values
    write(right(n, 2),right(L[n], 12))

    # Check if it is greater than greatest
    if L[n] > greatest then {
      greatest := L[n]
      mode := n
    }

  }

  write(" ", "Mode = ", mode)

  return

end

procedure printMean(p, L)

  local letter_total, n

  letter_total := 0

  # Sum word lengths
  every n := 20 to 1 by -1 do letter_total +:= (n * L[n])

  # Display arithmetic mean
  write(" ", "Mean = ", real(letter_total) / limit)

  return

end

procedure printMedian(p, L)

  local lcf, n, l2, vcm, valuesToMedian,
        fractionInMedian, medianMHalf, median

  # Initialize list of cumulative frequencies
  lcf := list(20,0)

  # First elements are the same
  lcf[1] := L[1]

  # Calculate other elements
  every n := 2 to 20 do lcf[n] := (lcf[n - 1] + L[n])

  # Find index where cumulative frequency is larger than or equal half of all values
  n := 0 ; l2 := limit / 2.0
  while lcf[n +:= 1] < l2
  vcm := n

  # Number of values to median index
  valuesToMedian := l2 - lcf[vcm - 1]

  # Fraction of same values to median
  fractionInMedian := valuesToMedian / L[vcm]

  # Subtract 0.5 from median value
  medianMHalf := vcm - 0.5

  # Calculate and display median
  median := medianMHalf + fractionInMedian
  write(" ","Median = ", median)

  return

end

procedure startHTML(title,outfilvar)

  write(outfilvar,"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0Transitional//EN\">")
  write(outfilvar,"<html>")
  write(outfilvar,"<head>")
  write(outfilvar,"<title>",title,"</title>")
  write(outfilvar,"<body>")
  write(outfilvar,"<p>")

  return

end

procedure endHTML(filename,outfilvar)

  # End html
  write(outfilvar,"</p>")
  write(outfilvar,"</body>")
  write(outfilvar,"</html>")

  # Confirmation
  write("File ",filename,".html has been created.")

  return

end

# Initialize Russian chartable
procedure initR()

  local charlist, range

  # Character keys
  charlist := ["A","B","V","G","D","E","|Z","Z","I","J","K","L","M","N","O",
               "P","R","S","T","U","F","X","C","|C","W","|W","|~","Y","|`","|E","|U","|A",
               "a","b","v","g","d","e","|z","z","i","j","k","l","m","n","o",
               "p","r","s","t","u","f","x","c","|c","w","|w","~","y","`","|e","|u","|a"]

  # Character range
  range := [1040,1103]

  # Special Russian characters
  chartable["{"] := "&#171;"
  chartable["}"] := "&#187;"
  chartable["|O"] := "&#1025;"
  chartable["|o"] := "&#1105;"
  chartable["["] := "<br />"
  chartable["]"] := "</p><p>"

  initializeAny(charlist,range)

  return

end

# Initialize Tamil chartable
procedure initT()

  local charlist, range

  # Keys
  charlist := ["V","","|a","|A","|i","|I","|u","|U","","","","|e","|E","|~","",
               "|o","|O","|`","k","","","","g","c","","j","","|n","T","","","",
               "|N","t","","","","N","n","p","","","","m","y","r","R","l","L","|l",
               "v","|s","","s","h","","","","","A","i","I","u","U","","","","e",
               "E","~","","o","O","`","}"]

  # Loop range
  range := [2947,3021]

  # Other characters
  chartable["a"] := ""
  chartable["|R"] := "&#3065;"
  chartable["|P"] := "#163;"
  chartable["["] := "<br />"
  chartable["]"] := "</p><p>"

  initializeAny(charlist,range)

  return

end

# Initialize Hebrew chartable
procedure initH()

  local charlist, range

  # Character order
  charlist := ["a","b","g","d","h","v","z","j","T","y","X","x","l",
               "M","m","N","n","S","o","F","f","C","c","q","r","s","t"]

  # Codes
  range := [1488,1514]

  # Dot in the middle
  chartable["`"] := "&#x05BC;"

  initializeAny(charlist,range)

  return

end

procedure initializeRussian()
  initializeChartable(initR)
  return
end

procedure initializeTamil()
  initializeChartable(initT)
  return
end

procedure initializeHebrew()
  initializeChartable(initH)
  return
end

procedure initializeChartable(init)

  # Create new table with default value
  chartable := table("??")

  # Call init procedure
  init()

end

procedure initializeAny(charlist,range)

  local n, m

  # List index
  m := 0

  # Fill table
  every n := range[1] to range[2] do
    chartable[charlist[m +:= 1]] := "&#" || n || ";"

  return

end

# Convert text using global chartable
procedure process()

  local filename,title,infilvar,outfilvar,line,newline,char

  # Read file name and title
  write("Prepared files: Russian - \"unir.txt\", Tamil - \"unit.txt\", Hebrew - \"unih.txt\"")
  writes("Enter the name of previously prepared file (default \"uni.txt\"): ")
  filename := read() ; if "" == filename then filename := "uni.txt"

  writes("What is the title of the text? (default \"Unicode\"): ")
  title := read() ; if "" == title then title := "Unicode"

  # Open input file
  (infilvar := open(filename)) | stop(filename," not found.")

  # Open output file
  outfilvar := open(filename || ".html","w")

  # Beginning of html
  startHTML(title,outfilvar)

  # Read lines from file
  while line := read(infilvar) do {

    # Initialize new string
    newline := ""

    line ? {

      # Add characters to string
      while char := move(1) do {

        # Punctuation
        # Variable is lexically less than "A"
        newline ||:= if char << "A" then {
          char
        } else if char == "|" then {
          chartable["|" || move(1)]
        } else {
          chartable[char]
        }

      }

    }

    # Save string in file
    write(outfilvar,newline)

  }

  # End html
  endHTML(filename,outfilvar)

  return

end

procedure initHex()

 # Define hexidecimal letters
 A := a := 10
 B := b := 11
 C := c := 12
 D := d := 13
 E := e := 14
 F := f := 15

 # Other symbols
 impermissible := (&ascii -- &digits -- 'aAbBcCdDeEfF')

 return

end

procedure processHex()

  local hexno, length, result, n

  write("This program converts hex numbers to decimal.")
  writes("Enter hex number to be converted. Period (.) to finish: ")

  # Read hex number
  while (hexno := read()) ~== "." do {

    # Test input
    hexno ? if upto(impermissible) then stop(hexno," is an invalid entry.\nBye.")

    # Initialize result and string length
    length := *hexno
    result := 0

    # Add values
    every n := 1 to length do {

      # Convert digits
      result +:= convert(hexno[n],length - n)

    }

    # Display decimal result and ask again
    write("Hex number ",hexno," = ",result," decimal.")
    writes("Enter hex number to be converted. Period (.) to finish: ")

  }

  write("Bye.")

  return

end

procedure convert(digit,index)

  local outcome

  # Return hexidecimal digit value
  outcome := (integer(digit) | variable(digit)) * (16 ^ index)

  return outcome

end

# Generate sentences from file
procedure get_sentence(filename)

  local filvar, sentence, line, substring, markers

  # Set markers
  markers := '.!?'

  # Open file
  filvar := open(filename)

  # Initialize sentence
  sentence := ""

  # Read line
  while line := read(filvar) do {

    line ? {

      # Find sentence ending
      while substring := tab(upto(markers)) do {

        # Add substring to sentence
        sentence ||:= (substring || tab(many(markers)))

        # Generate current sentence
        suspend sentence

        # Skip blanks and reset sentence
        tab(many(' '))
        sentence := ""

      }

      # Sentence is unfinished
      # Add remaining part of this line and continue
      if not pos(0) then sentence ||:= (line[&pos:0] || " ")

    }

  }

  close(filvar)

end

# Generate words from sentence
procedure getword_from_sentence(sentence)

  local chars, punct, word

  # Initialize local variables
  chars := (&letters ++ &digits ++ '\'-')
  punct := ' .,?";:!'

  # Scan sentence
  sentence? {

    # Skip initial blank characters
    tab(many(' '))

    # Read and suspend words
    while word := tab(many(chars)) do {
      tab(many(punct))
      suspend word
    }

  }

end

# Count words in sentence
procedure countsentence(sentence)

  local total

  total := 0

  # Count generated words
  every getword_from_sentence(sentence) do total +:= 1

  return total

end

# Number of words in sentences
procedure getav(filename)

  local numSent, listSent, sentence

  listSent := list(20,0)
  numSent := 0

  # Read sentence from file
  every sentence := get_sentence(filename) do {

    # Increment number of sentences and sentence counter
    listSent[countsentence(sentence)] +:= 1
    numSent +:= 1

  }

  printDev(listSent,numSent)

  return

end

procedure printDev(listSent,numSent)

  local word_total, n, mean

  write("Length Number Such")
  word_total := 0

  # Display values from list
  every n := 20 to 1 by -1 do {

    # Show number of words
    write(right(n,2),right(listSent[n],12))

    # Count all words
    word_total +:= (n * listSent[n])

  }

  # Show arithmetic mean and standard deviation
  mean := real(word_total) / numSent
  writes(" ","Mean = ", mean)
  writes(right("Standard deviation = ", 42))
  write(standard_deviation(listSent,numSent,mean))

  return

end

procedure standard_deviation(listSent,numSent,mean)

  local sum_of_squares, n, st_dev

  sum_of_squares := 0

  # Sum squares of differences multiplied by number of sentences
  every n := 1 to 20 do {
    sum_of_squares +:= ((n - mean) ^ 2) * listSent[n]
  }

  # Calculate standard deviation
  # Fractional power is square root
  st_dev := ((real(sum_of_squares) / numSent) ^ 0.5)

  return st_dev

end

procedure procFreq(filename, word_list)

  local numWords, word, n, word_freq

  # Initialize table with default value 0
  word_freq := table(0)

  numWords := 0

  # Read words from file
  every word := getword(filename) do {

    # Add 1 to totalWords
    numWords +:= 1

    every n := 1 to *word_list do {

      # If current word is in word_list count its occurrence
      if word == word_list[n] then {

        word_freq[word] +:= 1

        # Stop looking for word
        break

      }

    }

  }

  # Display results
  printFreq(numWords, word_freq)

  return

end

procedure printFreq(numWords, wf)

  local wl, n, word, occurrences

  # Labels
  write("Total number of words in file = ",numWords)
  writes("Word")
  writes(right("Occurrences",30))
  write(right("Percentage", 30))

  # Sort word frequencies
  # This converts table to list of pairs
  wl := sort(wf)

  # Show word frequencies
  every n := 1 to *wl do {
    word := wl[n][1]
    occurrences := wl[n][2]
    writes(word)
    writes(right(occurrences,34 - *word))
    write(right((occurrences * 100.0) / numWords,30))
  }

  return

end

procedure getDramaInfo()

  local dlist

  # Initialize list
  dlist := []

  # Display message
  write("Enter mean words per verse for each play in order of composition.")
  write("Hit return after each value. Single period + return to finish.")

  # Read input
  while put(dlist, numeric(read()))

  # Stop program
  if *dlist = 0 then stop("Bye!")

  # Return list of values
  return dlist

end

procedure procDrama(drama_list)

  local sort_list, sum_of_squares, n, dtable, rho

  n := sum_of_squares := 0

  # Sort data
  sort_list := sort(drama_list)

  dtable := table(0)

  # Display values
  writes("Values are: ")
  while writes(drama_list[n +:= 1]," ")
  write()

  # Save sorted positions of values in table
  every n := 1 to *drama_list do
    dtable[sort_list[n]] := n

  # Sum squares of differences between current position and position in sorted list
  every n := 1 to *drama_list do
    sum_of_squares +:= ((n - dtable[drama_list[n]]) ^ 2)

  # Calculate rho
  rho := (1 - (6 * sum_of_squares) / (real(*drama_list) * ((*drama_list ^ 2) - 1)))

  # Show result
  write("rho = ", rho)

  return

end

procedure getScValues()

  values := []

  # Read values of 'x' and 'y'
  repeat {
    writes ("X-value? Nonnumeric to finish. ")
    put(values,numeric(read())) | break
    writes("Y-value? ")
    while not put(values,numeric(read())) do
    writes("You must enter a numeric value. Y-value?")
  }

  return

end

# Calculate value ranges
# Set global variables x_min, y_min, x_range, y_range
procedure figure()

  local x_max, y_max, n

  # Initialize min and max values
  x_min := x_max := values[1]
  y_min := y_max := values[2]

  # Find minimum and maximum values
  every n := 3 to *values by 2 do {
    (x_min := (x_min > values[n])) | (x_max := (x_max < values[n]))
    (y_min := (y_min > values[n + 1])) | (y_max := (y_max < values[n + 1]))
  }

  # Set range
  x_range := x_max - x_min
  y_range := y_max - y_min

  return

end

# Scale value to max
procedure scale(n,min,range,max)
  return integer((n - min) / real(range) * max)
end

# Display scattergram
procedure scatter()

  local n, row, col, p

  # Erase screen
  writes("\e[2J")

  # Process x-y pairs
  every n := 1 to *values by 2 do {

    # Calculate column and row
    # Values are scaled to 80 columns and 25 rows
    col := scale(values[n], x_min, x_range, 79) + 1
    row := 26 - ((scale(values[n + 1], y_min, y_range, 24) + 1))

    # Set position under first scattergram dot
    /p := [row + 1,col]

    # Move cursor and write dot
    writes("\e[", row, ";", col, "H")
    writes(".")

  }

  # Set command prompt position
  writes("\e[", p[1], ";", p[2], "H")

  return

end

# Calculate arithmetic mean
procedure mean(L)

  local total,n

  total := 0

  every n := 1 to *L do {
    total +:= L[n]
  }

  return real(total) / *L

end

# Calculate standard deviation using mean
procedure st_dv(m, L)

  local sum_of_squares, n

  sum_of_squares := 0

  every n := 1 to *L do {
    sum_of_squares +:= ((L[n] - m) ^ 2)
  }

  return (real(sum_of_squares) / *L) ^ 0.5

end

# Calculate z-score
procedure z_sc(raw_score,m,sd)
  return (raw_score - m) / real(sd)
end

# Check if currently scanned word is in list L
procedure is_in_list(L)
  suspend tab(match(!L)) & pos(0)
end

# Create table with numbers of word occurrences in file
procedure make_table(flnm,L)

  local t, word

  # Create table
  t := table(0)

  # Read words from file
  every word := getword(flnm) do {

    word ? {

      # Count word if it is in list
      if is_in_list(L) then {
        t[word] +:= 1
      }

    }

  }

  return t

end

procedure procPearson(wl,fnm_a,fnm_b)

  local table_a, table_b, list_a, list_b, n, a_mean, b_mean,
        a_sd, b_sd, z_sc_product, coefficient

  # Initialize sum of products
  z_sc_product := 0

  # Create tables with numbers of word occurrences in each file
  table_a := make_table(fnm_a,wl)
  table_b := make_table(fnm_b,wl)

  # Lists contain number of occurrences of nth words
  list_a := list(*wl,0)
  list_b := list(*wl,0)
  every n := 1 to *wl do {
    list_a[n] := table_a[wl[n]]
    list_b[n] := table_b[wl[n]]
  }

  # Calculate mean and standard deviation
  a_mean := mean(list_a)
  b_mean := mean(list_b)
  a_sd := st_dv(a_mean,list_a)
  b_sd := st_dv(b_mean,list_b)

  # Sum products of corresponding z-scores
  every n := 1 to *wl do
    z_sc_product +:= z_sc(list_a[n] , a_mean, a_sd) * z_sc(list_b[n], b_mean, b_sd)

  # Calculate and display coefficient
  coefficient := z_sc_product / *wl
  write("Coefficient is ",coefficient)

  return

end

# Read at most 2 filenames
procedure getfiles(L)

  local L_out, n, flag

  L_out := []

  # Process list
  every n := 1 to *L do {

    # Scan list element
    L[n] ? {

      if isfile() then {

        # If element is file add it to list
        put(L_out, L[n])

        # Break after second string was added
        (/flag := 1) | break

      }

    }

  }

  # Return list of files
  return L_out

end

# File consists of permissible characters and ends with '.txt'
procedure isfile()

  static permissible

  initial permissible := &letters ++ &digits ++ '$&#%\'()-@^{}~` !_'

  return tab(many(permissible)) || =".txt" & pos(0)

end

procedure rhyme()

  local n, numbers

  # Number of bottles
  n := 10

  # Initialize words
  numbers := list(10)
  numbers[1] := "One"
  numbers[2] := "Two"
  numbers[3] := "Three"
  numbers[4] := "Four"
  numbers[5] := "Five"
  numbers[6] := "Six"
  numbers[7] := "Seven"
  numbers[8] := "Eight"
  numbers[9] := "Nine"
  numbers[10] := "Ten"

  # Main loop
  while n > 0 do {
    write(numbers[n]," green bottle",plural(n)," hanging on the wall.")
    write(numbers[n]," green bottle" ,plural(n), " hanging on the wall.")
    write("Now if one green bottle should accidentally fall,")
    write("There'd be ",lcase(numbers[n -:= 1])," green bottle",plural(n)," hanging on the wall.")
  }

  write("There'd be no green bottles hanging on the wall.")

  return

end

procedure plural(n)
  return if 1 = n then "" else "s"
end

procedure lcase(s)
  return map(s,&ucase,&lcase)
end

procedure get_started()

  local str

  # Read input from user
  writes("This is the ")
  str := read()
  writes("That ")
  str ||:= " that " || read()

  return str

end

procedure jack(conc)

  local noun,verb,n

  # Initialize lists
  nouns := []
  verbs := []

  repeat {

    # Reset list index
    n := 0

    # Read verb and noun
    write() ; writes("This is the ")
    noun := check(read(),1)
    writes("That ")
    verb := check(read(),2)
    writes("The ")

    # Show nouns and verbs from lists
    while write(nouns[n +:= 1]) do {
      writes("That ",verbs[n]," the ")
    }

    # Add noun and verb at the beginning
    push(nouns,noun)
    push(verbs,verb)

    # Display last string
    write(conc)

  }

  return

end

# Shuffle list
procedure shuffle(L)

  local i

  i := *L
  while i >= 2 do {

    # Swap random value
    L[?i] :=: L[i]
    i -:= 1

  }

  return L

end

procedure check(s,n)

  local p

  # Exit program
  if upto('.', s) then {
    stop()
  } else {

    # Remove plus sing and shuffle global list
    if p := upto('+', s) then {
      s[p] := ""
      shuffle(if 1 = n then nouns else verbs)
    }

  }

  return s

end

procedure stars()
  write(repl("*",70))
  return
end

procedure main()

  local words, filelist, committee_A, memcount, members, k

  stars()

  # Word lengths
  writes("Lengths: ")
  "One went and came." ? while writes(*tab(upto('. '))," ") do tab(many('. '))
  write()

  # Word distribution
  write("Distribution: ")
  word_lengths("It now remains to write a procedure to write out the table")
  printout()

  # Read key
  # write("Hit any key to continue")
  # getch()

  stars()

  write("Histogram")

  # Histogram
  histogram()

  stars()

  # Display characters
  write("Characters: ") ; dispChars() ; write()

  stars()

  # File modes
  modesMeansMedians("file.txt")

  # Russian
  # initializeRussian()

  # Tamil
  # initializeTamil()

  # Hebrew
  # initializeHebrew()

  # Process Russian/Tamil/Hebrew
  # process()

  # Convert hexidecimal numbers
  # initHex()
  # processHex()

  stars()

  getav("sdev.txt")

  stars()

  words := ["the","by","in"]

  procFreq("wfreq.txt",words)

  stars()

  # Spearman rank correlation
  procDrama([1,2,3,4,5,6,7,8,9,10])
  procDrama([8.93,9.02,9.147,9.26,9.152,9.2,9.22,9.32,9.48,9.53])
  # procDrama(getDramaInfo())

  stars()

  # Scattergram
  # getScValues()
  # figure()
  # scatter()

  # Pearson's coefficient of correlation
  procPearson(words,"wlist.txt","wfreq.txt")

  # Read file names
  filelist := getfiles(["one.txt","three.abc","four.abc","two.txt","five.txt"])
  write("First file is ",filelist[1])
  write("Second file is ",filelist[2])

  stars()

  # Create set
  committee_A := set(["Jones", "Brown", "Rodriguez", "Sperber"])

  # Set membership
  if member(committee_A,"Jones") then write("Set")

  # Insert set element
  insert(committee_A,"Jackson")

  # Union
  committee_A ++:= set(["Jackson"])

  # Number of occurrences in list
  # Count only members that are in committee_A
  memcount := table(0)
  members := ["Jones","Brown","Jones","Jones","Unknown"]
  every memcount[member(committee_A,!members)] +:= 1
  every k := key(memcount) do write(k,": ",memcount[k])

  stars()

  # Bottles
  # rhyme()

  # Jack
  # jack(get_started())

end

