
# Sample Programs

# ---------------------------------------------------------

link options
link random

$define ColMax 72
$define MinLength 3
$define NameWidth 15
$define Length 78
$define Limit 1000

global uses, colmax, namewidth, lineno,
       GameObject, Tree, Learn,
       defs, ifile, in, limit, prompt, tswitch

# ---------------------------------------------------------

record exrecord(a,b,c,d)
record Question(question, yes, no)
record nonterm(name)
record charset(chars)

# ---------------------------------------------------------

# Author: Robert J. Alexander with additions by Gregg M. Townsend
procedure options2(arg, optstring, errproc)

  local f, fList, fileArg, fn, ignore, opttable, opttype, p, x, option, optname

  # Initialize.
  #
  /optstring := string(&letters)
  /errproc := stop
  option := table()
  fList := []
  opttable := table()

  # Scan the option specification string.
  #
  optstring ? {

    while optname := move(1) do {

      # Skip blank
      if optname == " " then {
        next
      }

      # Long option name
      if optname == "-" then {
        optname := tab(many(&letters)) | move(1) | break
      }

      # Set option type
      opttype := tab(any('!:+.')) | "!"

      # Save option in table
      opttable[optname] := opttype

    }

  }

  # Iterate over program invocation argument words.
  #
  while x := get(arg) do {

    if /x then {
      ignore := &null # if end of args from file, stop ignoring
    } else {

      # Scan argument (first from pair)
      x ? {

        # If '-' is not at the end and ignore is null
        if ="-" & not pos(0) & /ignore then {

          # Second '-'
          if ="-" & pos(0) then {
            ignore := 1 # ignore following args if --
          } else {

            # Scan option name
            tab(0) ? {

              until pos(0) do {

                # Find option name and type
                if opttype := \opttable[optname := ((pos(1), tab(0)) | move(1))] then {

                  # Save value in table
                  option[optname] :=
                    if any(':+.', opttype) then {

                      p := "" ~== tab(0) | get(arg) | return errproc("No parameter following -" || optname)

                      case opttype of {
                        ":": p
                        "+": integer(p) | return errproc("-" || optname || " needs numeric parameter")
                        ".": real(p) | return errproc("-" || optname || " needs numeric parameter")
                      }

                  # Argument without type
                  } else {
                    1
                  }

                # Option not found
                } else {
                  return errproc("Unrecognized option: -" || optname)
                }

              }

            }

          }

        # If the argument begins with the character "@", fetch option
        # words from lines of a text file.
        #
        } else if ="@" & not pos(0) & /ignore then {

          # Open text file
          f := open(fn := tab(0)) | return errproc("Can't open " || fn)
          fileArg := []

          # Collect arguments
          while put(fileArg, read(f))
          close(f)

          # Last argument is null
          push(arg) # push null to signal end of args from file

          # Push other arguments
          while push(arg, pull(fileArg))

        } else {

          # Different type of argument
          put(fList, x)

        }

      }

    }

  }

  # Move arguments
  while push(arg, pull(fList))

  return option

end

procedure showValues(optionsTable)
  write("S: ",optionsTable["s"])
  write("B: ",optionsTable["b"])
  write("P: ",optionsTable["p"])
  write("Inum: ",optionsTable["inum"])
  return
end

procedure checkArgs(arguments)

  if 0 = *arguments then {
    write("All arguments")
  }

  return

end

procedure showAndCheck(optionsTable,arguments)
  showValues(optionsTable)
  checkArgs(arguments)
  return
end

procedure testOpts(arguments,spString)

  local optionsTable

  optionsTable := options2(arguments,spString)
  showAndCheck(optionsTable,arguments)
  line()

  return

end

procedure testOptions()

  local spString

  # Set specification string
  spString := "s:b.p+-inum+"

  # Command line arguments
  testOpts(["-s","parstring","-b","5.2","-inum","15","-p","8"],spString)

  # Arguments from file
  testOpts(["@argfile.txt"],spString)

  return

end

# ---------------------------------------------------------

# Author: Robert J. Alexander
procedure ximage(x, indent, done)

  local i, s, ss, state, t, xtag, tp, sn, sz

  static tr

  # If this is the outer invocation, do some initialization.
  #
  if /(state := done) then {
    tr := &trace ; &trace := 0 # postpone tracing while in here
    indent := ""
    done := table()
  }

  # Determine the type and process accordingly.
  #
  indent := (if indent == "" then "\n" else "") || indent || " "
  ss := ""

  tp := type(x)

  s := if xtag := \done[x] then {
    xtag
  } else {

    case tp of {

      # Unstructured types just return their image().
      #
      "null" | "string" | "integer" | "real" | "cset" | "co–expression" |
      "file" | "procedure" | "window": image(x)

      "list": { # list

        image(x) ? {

          tab(6)

          # Identifier
          sn := tab(find("("))

          # Size
          sz := tab(0)

        }

        # Label (L8, L7, L6, ...)
        done[x] := xtag := "L" || sn

        # Figure out if there is a predominance of any object in the
        # list. If so, make it the default object.
        #
        t := table(0)

        # Count objects in list
        every t[!x] +:= 1

        # Zero occurrences of anonymous object
        s := [, 0]

        # Generate pairs
        every t := !sort(t) do {

          # Find pair with largest second element (occurrences)
          if s[2] < t[2] then {
            s := t
          }

        }

        # More than 33% elements are s[1]
        if s[2] > *x / 3 & s[2] > 2 then {

          # Element
          s := s[1]

          # Indented image of most frequent element
          t := ximage(s, indent || " ", done)

          # Braces and identifier
          if t ? (not any('\'"') & ss := tab(find(" :="))) then {
            t := "{" || t || indent || " " || ss || "}"
          }

        } else {
          s := t := &null
        }

        # Output the non–defaulted elements of the list.
        #
        ss := ""
        every i := 1 to *x do {
          if x[i] ~=== s then {
            ss ||:= indent || xtag || "[" || i || "] := " || ximage(x[i], indent, done)
          }
        }

        # Type and size
        s := tp || sz

        # Insert element
        s[-1:-1] := ", " || \t

        # Tag and elements
        xtag || " := " || s || ss

      }

      "set": { # set

        image(x) ? {
          tab(5)
          sn := tab(find("("))
        }

        # Identifier
        done[x] := xtag := "S" || sn

        # Sorted elements
        every i := !sort(x) do {

          t := ximage(i, indent || " ", done)

          if t ? (not any('\'"') & s := tab(find(" :="))) then {
            t := "{" || t || indent || " " || s || "}"
          }

          ss ||:= indent || "insert(" || xtag || ", " || t || ")"

        }

        # Concatenate
        xtag || " := " || "set()" || ss

      }

      "table": { # table

        image(x) ? {
          tab(7)
          sn := tab(find("("))
        }

        # Table label
        done[x] := xtag := "T" || sn

        # Output the table elements. This is a bit tricky, since
        # the subscripts might be structured, too.
        #
        every i := !sort(x) do {

          # Subscript image
          t := ximage(i[1], indent || " ", done)

          if t ? (not any('\'"') & s := tab(find(" :="))) then {
            t := "{" || t || indent || " " || s || "}"
          }

          # Subscripts and values
          ss ||:= indent || xtag || "[" || t || "] := " || ximage(i[2], indent, done)

        }

        # Output the table, including its default value (which might
        # also be structured.
        #
        t := ximage(x[[ ]], indent || " ", done)

        if t ? (not any('\'"') & s := tab(find(" :="))) then {
          t := "{" || t || indent || " " || s || "}"
        }

        # Table image
        xtag || " := " || "table(" || t || ")" || ss

      }

      default: { # record

        image(x) ? {
          move(7)
          t := ""
          while t ||:= tab(find("_")) || move(1)
          t[-1] := ""
          sn := tab(find("("))
        }

        done[x] := xtag := "R_" || t || "_" || sn

        # Record fields
        every i := 1 to *x do {

          name(x[i]) ? {
            (tab(find(".")), sn := tab(0))
          }

          # Add field image
          ss ||:= indent || xtag || sn || " := " || ximage(\x[i], indent, done)

        }

        # Return image
        xtag || " := " || t || "()" || ss

      }

    }

  }

  # If this is the outer invocation, clean up before returning.
  #
  if /state then {
    &trace := tr # restore &trace
  }

  return s

end

# Write ximages of x1, x1, ..., xn.
procedure xdump(x[])
  every write(&errout, ximage(!x))
  return x[-1] | &null
end

procedure testImage()

  local lst, z, st, tb, re, rc

  lst := [1,2,[3,[4,5],6,7],8,9]

  # Unstructured types
  write(ximage(5))
  write(ximage("abc"))
  write(ximage('def'))
  write(ximage(xdump))

  line()

  # Lists
  write(ximage(lst))
  write(ximage([2,3,4,5,5,5,5,5,5,4,5,5,5,5,5]))
  z := [8,9]
  write(ximage([1,2,3,4,z,z,z,z,z,z,z,5,z,z,z,z]))

  line()

  # Sets
  st := set([2,4,3,2,4,5,4])
  insert(st,[st,z])
  write(ximage(st))

  line()

  # Tables
  tb := table(0)
  tb["A"] := 2
  tb["B"] := 5
  tb[z] := 8
  write(ximage(tb))

  line()

  # Records
  rc := exrecord(5,6,7,8)
  re := exrecord(1,tb,z,rc)
  write(ximage(rc))
  write(ximage(re))

  line()

  # Xdump
  xdump(rc,re,z,tb)

  line()

  return

end

# ---------------------------------------------------------

# Author: Ralph E. Griswold
procedure concordances(arguments)

  local opts, uselist, name, line, pad, i, j, fill

  opts := options(arguments, "l+w+") # process options

  # Line length and word width
  colmax := \opts["l"] | ColMax
  namewidth := \opts["w"] | NameWidth

  # Padding
  pad := repl(" ", namewidth)

  # Set global table and line number
  uses := table()
  lineno := 0

  # Process words and save occurrences in table uses
  every tabulate(item(), lineno) # tabulate all citations

  # Sort values by keys
  uselist := sort(uses, 3) # sort by uses

  # Read word (odd index)
  while fill := left(get(uselist), namewidth) do {

    # Read line numbers (even index)
    line := format(get(uselist)) # line numbers

    # Length of line with word and line indices
    while (*line + namewidth) > colmax do { # handle long lines

      line ?:= {

        i := j := 0

        every i := upto(' ') do {

          # Index too large
          if i > (colmax - namewidth) then {
            break

          # Update valid index
          } else {
            j := i
          }

        }

        # Write part of string
        write(fill, tab(j))

        move(1)

        # Set fill and discard already displayed part of string
        fill := pad
        tab(0) # new value of line

      }

    }

    # Write remaining part of string
    if *line > 0 then {
      write(fill, trim(line))
    }

  }

end

# Add to count of line number to citations for name.
#
procedure tabulate(name, lineno)
  /uses[name] := table(0)
  uses[name][lineno] +:= 1
  return
end

# Format the line numbers, breaking long lines as necessary.
#
procedure format(linenos)

  local i, line

  # Sort line numbers
  linenos := sort(linenos, 3)

  line := ""

  # Read line number
  while line ||:= get(linenos) do {

    # Append number of occurrences if it is greater than 1
    line ||:= ("(" || (1 < get(linenos)) || ") ") | " "

  }

  # Return prepared string
  return line

end

# Get an item. Different kinds of concordances can be obtained by
# modifying this procedure.
#
procedure item()

  local i, word, line

  # Read lines
  while line := read() do {

    # Global line number
    lineno +:= 1

    # Show line number and line
    write(right(lineno, 6), " ", line)

    line := map(line) # fold to lowercase

    i := 1

    # Suspend words
    line ? {
      while tab(upto(&letters)) do {
        word := tab(many(&letters))
        if *word >= MinLength then { # skip short words
          suspend word
        }
      }
    }

  }

end

# ---------------------------------------------------------

# Author: Robert J. Alexander
procedure animalGame()

  # Set game object
  GameObject := "animal"

  # Set first question
  Tree := Question("Does it live in water", "goldfish", "canary")

  Get() # Recall prior knowledge

  Game() # Play a game

  return

end

# Game() –– Conducts a game.
#
procedure Game()

  # Main loop
  # Ask first question
  while Confirm("Are you thinking of ", Article(GameObject), " ",GameObject) do {

    # Start with root node
    Ask(Tree)

  }

  write("Thanks for a great game.")

  # Save knowledge
  if \Learn & Confirm("Want to save knowledge learned this session") then {
    Save()
  }

  return

end

# Confirm() –– Handles yes/no questions and answers.
#
procedure Confirm(q[])

  local answer, s

  static ok

  # Initialize answer table
  initial {
    ok := table()
    every ok["y" | "yes" | "yeah" | "uh huh"] := "yes"
    every ok["n" | "no" | "nope" | "uh uh" ] := "no"
  }

  # Ask while answer is empty
  while /answer do {

    # Question
    every writes(!q)
    write("?")

    case s := read() | exit(1) of {

      # Commands recognized at a yes/no prompt.
      #

      # Save
      "save": Save()

      # Read database from file
      "get": Get()

      # List answers
      "list": List()

      # Show whole tree
      "dump": Output(Tree)

      # Select answer from table or display message
      default: {
        (answer := \ok[map(s, &ucase, &lcase)]) | write("This is a \"yes\" or \"no\" question.")
      }

    }

  }

  # Fail if answer is not 'yes'
  return answer == "yes"

end

# Ask() –– Navigates through the barrage of questions leading to a
# guess.
#
procedure Ask(node)

  local guess, question

  case type(node) of {

    # Check answer
    "string": {

      # Wrong answer
      if not Confirm("It must be ", Article(node), " ", node, ", right") then {

        # Save new data
        Learn := "yes"
        write("What were you thinking of?")
        guess := read() | exit(1)
        write("What question would distinguish ", Article(guess), " ", guess, " from ", Article(node), " ", node, "?")
        question := read() | exit(1)

        # Remove question mark
        if question[-1] == "?" then {
          question[-1] := ""
        }

        # Capitalize first letter
        question[1] := map(question[1], &lcase, &ucase)

        if Confirm("For ", Article(guess), " ", guess, ",what would the answer be") then {

          # Yes
          return Question(question, guess, node)

        } else {

          # No
          return Question(question, node, guess)

        }

      }

    }

    # Next question
    "Question": {

      if Confirm(node.question) then {
        node.yes := Ask(node.yes)
      } else {
        node.no := Ask(node.no)
      }

    }

  }

end

# Article() –– Come up with the appropriate indefinite article.
#
procedure Article(word)
  return if any('aeiouAEIOU', word) then {
    "an"
  } else {
    "a"
  }
end

# Save() –– Store our acquired knowledge in a disk file name
# based on the GameObject.
#
procedure Save()

  local f

  # File name ends with 's'
  f := open(GameObject || "s", "w")

  # Save tree in file
  Output(Tree, f)

  close(f)

  return

end

# Output() –– Recursive procedure used to output the knowledge tree.
#
procedure Output(node, f, sense)

  static indent

  initial indent := 0

  /f := &output
  /sense := " "

  case type(node) of {

    # Answer
    "string": write(f, repl(" ", indent), sense, "A: ", node)

    # Question
    "Question": {

      write(f, repl(" ", indent), sense, "Q: ", node.question)

      # Indent answers
      indent +:= 1

      # Pass 'y' and 'n' (sense)
      Output(node.yes, f, "y")
      Output(node.no, f, "n")

      # Restore indentation
      indent -:= 1

    }

  }

  return

end

# Get() –– Read in a knowledge base from a file.
#
procedure Get()

  local f

  # Open file
  f := open(GameObject || "s", "r") | fail

  # Load tree from file
  # Save it in global variable
  Tree := Input(f)

  close(f)

  return

end

# Input() –– Recursive procedure used to input the knowledge tree.
#
procedure Input(f)

  local nodetype, s

  # Read one line
  read(f) ? {

    # Skip prefix (y, n)
    # Variable nodetype is 'Q' or 'A'
    # Save text in s
    tab(upto(~' \t')) & =("y" | "n" | "") & nodetype := move(1) & move(2) & s := tab(0)

  }

  # Continue if line is question
  return if nodetype == "Q" then {

    Question(s, Input(f), Input(f))

  # Return answer
  } else {
    s
  }

end

# List() –– Lists the objects in the knowledge base.
#

procedure List()

  local lst, line, item

  # Collect all answers from tree
  lst := Show(Tree, [])

  line := ""

  # Sort answers
  every item := !sort(lst) do {

    # Write line if after appending item it is too long
    if *line + *item > Length then {

      write(trim(line))

      # Reset line
      line := ""

    }

    # Append item
    line ||:= item || ", "

  }

  # Write line without last ', '
  write(line[1:-2])

  return

end

#
# Show() –– Recursive procedure used to navigate the knowledge tree.
#
procedure Show(node, lst)

  # Collect answers
  if type(node) == "Question" then {

    # Pass list
    lst := Show(node.yes, lst)
    lst := Show(node.no, lst)

  # Add leaf
  } else {
    put(lst, node)
  }

  return lst

end

# ---------------------------------------------------------

# Author: Ralph E. Griswold
procedure genSent(arguments)

  local line, plist, s, opts

  # procedures to try on input lines
  #
  plist := [define, generate, grammar, source, comment, prompter, error]
  defs := table() # table of definitions

  # Definitions are lists of lists
  defs["lb"] := [["<"]] # built–in definitions
  defs["rb"] := [[">"]]
  defs["vb"] := [["|"]]
  defs["nl"] := [["\n"]]
  defs[""] := [[""]]
  defs["&lcase"] := [[charset(&lcase)]]
  defs["&ucase"] := [[charset(&ucase)]]
  defs["&digit"] := [[charset(&digits)]]

  # Table of options
  opts := options(arguments, "tl+s+r")
  limit := \opts["l"] | Limit
  tswitch := \opts["t"]
  &random := \opts["s"]

  # If there are no 's' and 'r' options set value of &random based on date and time
  if /opts["s"] & /opts["r"] then {
    randomize()
  }

  ifile := [&input] # stack of input files
  prompt := ""

  # Read one file
  while in := pop(ifile) do { # process all files

    repeat {

      # Write prompt if it is not empty string
      if *prompt ~= 0 then {
        writes(prompt)
      }

      # Read line from input
      line := read(in) | break

      # Line continuation
      while line[-1] == "\\" do {
        line := line[1:-1] || read(in) | break
      }

      # Call procedures with line argument
      # If procedure fails others are used
      (!plist)(line)

    }

    # Close file from stack
    close(in)

  }

end

# Process alternatives.
#
procedure alts(defn)

  local alist

  alist := []

  # Process parts of definition between '|'
  defn ? {
    while put(alist, syms(tab(upto('|') | 0))) do {
      move(1) | break
    }
  }

  # Return processed parts
  return alist

end

# Look for comment.
#
procedure comment(line)
  if line[1] == "#" then {
    return
  } else {
    fail
  }
end

# Look for definition.
#
procedure define(line)

  # Scan line and find definition or fail
  # After failing try procedure generate
  return line ? {

    # Find grammar assignment
    # Save definition in table
    defs[(="<", tab(find(">::=")))] := (move(4), alts(tab(0)))

  }

end

# Define nonterminal.
#
procedure defnon(sym)

  local chars, name

  # Scan between brackets
  if sym ? {
    ="'" &
    chars := cset(tab(-1)) &
    ="'"
  } then {

    # Return charset record with character set
    return charset(chars)

  } else {

    # Other definition
    # Return nonterm record
    return nonterm(sym)

  }

end

# Note erroneous input line.
#
procedure error(line)

  # Default message for unrecognized line
  write("∗∗∗ erroneous line: ", line)

  return

end

# Generate sentences.
#
procedure gener(goal)

  local pending, symbol

  # Put nonterm record with goal in list
  pending := [nonterm(goal)]

  # Take value from list
  while symbol := get(pending) do {

    # Display images of current and remaining objects
    if \tswitch then {
      write(&errout, symimage(symbol), listimage(pending))
    }

    case type(symbol) of {

      # Display this string
      "string": writes(symbol)

      # Random character from set
      "charset": writes(?symbol.chars)

      # Defined symbol
      "nonterm": {

        # Add value at the beginning of list
        pending := ?\defs[symbol.name] ||| pending | {
          write(&errout, "∗∗∗ undefined nonterminal: <",symbol.name, ">")
          break
        }

        # Too many symbols
        if *pending > \limit then {
          write(&errout, "∗∗∗ excessive symbols remaining")
          break
        }

      }

    }

  }

  # Newline after generating goal
  write()

end

# Look for generation specification.
#
procedure generate(line)

  local goal, count

  if line ? {

    # Read type and number of values to generate
    ="<" &
    goal := tab(upto('>')) \ 1 &
    move(1) &
    count := (pos(0) & 1) | integer(tab(0))

  } then {

    # Generate appropriate number of values
    every 1 to count do {
      gener(goal)
    }

    return

  } else {

    # Fail and try next procedure - grammar
    fail

  }

end

# Get right hand side of production.
#
procedure getrhs(a)

  local rhs

  rhs := ""

  every rhs ||:= listimage(!a) || "|"

  return rhs[1:-1]

end

# Look for request to write out grammar.
#
procedure grammar(line)

  local file, out, name

  if line ? {

    name := tab(find("->")) &
    move(2) &
    file := tab(0) &
    out := if *file = 0 then {
      &output
    } else {
      open(file, "w") | {
        write(&errout, "∗∗∗ cannot open ", file)
        fail
      }
    }

  } then {

    (*name = 0) | (name[1] == "<" & name[-1] == ">") | fail

    pwrite(name, out)

    if *file ~= 0 then {
      close(out)
    }

    return

  } else {
    fail
  }

end

# Produce image of list of grammar symbols.
#
procedure listimage(a)

  local s, x

  s := ""

  every x := !a do {
    s ||:= symimage(x)
  }

  return s

end

# Look for new prompt symbol.
#
procedure prompter(line)

  # Set new prompter
  if line[1] == "=" then {
    prompt := line[2:0]
    return
  }

end

# Write out grammar.
#
procedure pwrite(name, ofile)

  local nt, a

  static builtin

  initial builtin := ["lb", "rb", "vb", "nl", "", "&lcase", "&ucase", "&digit"]

  if *name = 0 then {

    a := sort(defs, 3)

    while nt := get(a) do {

      if nt == !builtin then {
        get(a)
        next
      }

      write(ofile, "<", nt, ">::=", getrhs(get(a)))

    }

  } else {
    write(ofile, name, "::=", getrhs(\defs[name[2:-1]])) |
    write("∗∗∗ undefined nonterminal: ", name)
  }

end

# Look for file with input.
#
procedure source(line)

  local file, new

  return line ? {

    if ="@" then {

      # Open file with grammar
      new := open(file := tab(0)) | {
        write(&errout, "∗∗∗ cannot open ", file)
        fail
      }

      # Add opened file to list
      push(ifile, in) & in := new

      return

    }

  }

end

# Produce string image of grammar symbol.
#
procedure symimage(x)

  return case type(x) of {

    # Show string
    "string": x

    # Record name
    "nonterm": "<" || x.name || ">"

    # Characters
    "charset": "<'" || x.chars || "'>"

  }

end

# Process the symbols in an alternative.
#
procedure syms(alt)

  local slist

  static nonbrack

  initial nonbrack := ~'<'

  slist := []

  # Define words between '<' and '>'
  alt ? {
    while put(slist, tab(many(nonbrack)) | defnon(2(="<", tab(upto('>')), move(1))))
  }

  # Return list with records and strings
  return slist

end

procedure generateSentences()

  # Set prompt - '=myPrompt'
  # Load grammar from file - '@grammar.txt'
  # Save grammar in file - '->outfile.txt'
  genSent([])

  return

end

# ---------------------------------------------------------

procedure line()
  write(repl("-",50))
  return
end

# ---------------------------------------------------------

procedure main()

  line()

  # Options
  testOptions()

  # Ximage
  testImage()

  # Concordances
  # concordances(["-l","20","-w","15"])

  # Animal Game
  # animalGame()

  # Sentences
  generateSentences()

end

# ---------------------------------------------------------
