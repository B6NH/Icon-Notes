# ---------------------------------------------------------

link graphics
link random
link turtle
link interact
link vsetup

# ---------------------------------------------------------

# Graphics Programming in Icon

# ---------------------------------------------------------

# Redefine name
$define Margin 1
$ifdef Margin
  $undef Margin
  $define Margin 2
$endif

record testr(a,b,c,d)

# ---------------------------------------------------------

# Interface variables
global vidgets
global root
global pause
global size
global half
global pane
global colors

# Parameters set from interface
global delay
global density
global draw_proc
global max_off
global min_off
global max_radius
global min_radius
global scale_radius

# State information
global draw_list
global reset
global state

# Circle record
record circle(off1,off2,radius,color)

# Constants
$define DensityMax 100
$define SliderMax 10.0
$define SliderMin 1.0

# ---------------------------------------------------------

procedure greet(name)
  write("Hi there!")
  write("My name is ", name, ".")
  return
end

procedure mshuffle(X)

  local i

  every i := *X to 2 by -1 do {
    X[?i] :=: X[i]
  }

  return X

end

procedure icon()

  local lst, r

  # Procedure call
  greet("George")

  # Argument list
  lst := [1,2,3,4]
  write ! lst

  # Show defined value
  write("Margin: ",Margin)

  # Shuffle record fields
  r := testr(1,2,3,4)
  mshuffle(r)
  write("Record: ",r.a,r.b,r.c,r.d)

  return

end

# ---------------------------------------------------------

procedure rectangles()

  local width, height, x, y, w, h, colors, rect, brk

  width := 500 ; height := 300
  colors := ["red", "blue", "green", "yellow", "purple", "white", "black"]
  rect := [FillRectangle, DrawRectangle]

  write("Event processing started")

  brk := 0
  repeat {

    # Random width and height
    w := ?width
    h := ?height

    # Position
    x := ?width - w / 2
    y := ?height - h / 2

    # Set random color
    Fg(?colors)

    # Random rectangle
    (?rect)(x, y, w, h)

    # Wait for events
    WDelay(300)

    # Process events
    while *Pending() > 0 do {

      case Event() of {

        # Hold down left mouse button to pause drawing rectangles
        &lpress: {
          until Event() === &lrelease
          write("Left mouse button released")
        }

        "q": {
          brk := 1
        }

      }

    }

    if 1 = brk then break

  }

  write("Event processing complete")

  return

end

procedure graphics()

  local normal

  # Open 400x300 (width x height) pixel window
  # Background color is light gray
  WOpen("label=Graphics","size=400,300","bg=light gray")

  # Set colors and line width
  # Enable window resizing
  WAttrib("fg=white","bg=black","linewidth=4","resize=on")
  Fg("red") ; Bg("black")

  # Show foreground color
  write("Foreground: ",WAttrib("fg"))

  # Display text inside window
  WWrite("Hello World!")

  # Draw red rectangle
  DrawRectangle(20,30,200,100)

  # Store attributes in list
  normal := ["bg=white", "fg=orange"]

  # Set attributes using list
  WAttrib ! normal

  # Blue rectangle
  FillRectangle(250,40,70,70)

  # Fill rectangle with background color
  Bg("black")
  EraseArea(250,40,40,40)

  # Two rectangles
  Fg("green")
  DrawRectangle(80,150,60,60,
                100,160,70,70)

  # Synchronize
  # WSync()

  # Wait 5 seconds
  WDelay(5000)

  # Rectangles
  rectangles()

  # Wait for 'q'
  write("Press 'q' to quit")
  WDone()

  return

end

# ---------------------------------------------------------

procedure sierpinski()

  local width, height, x1, y1, x2, y2, x3, y3, x, y

  width := 400 ; height := 400
  x1 := 0 ; y1 := height
  x2 := width / 2 ; y2 := 0
  x3 := width ; y3 := height
  x := width / 2 ; y := height / 2

  # Loop until 'q' is pressed
  until WQuit() do {

    case ?3 of {

      1 : {
        write("Old ",x," - ",y)
        x := (x + x1) / 2
        y := (y + y1) / 2
        write("New ",x," - ",y)
      }

      2 : {
        x := (x + x2) / 2
        y := (y + y2) / 2
      }

      3 : {
        x := (x + x3) / 2
        y := (y + y3) / 2
      }

    }

    DrawPoint(x,y)

  }

  return

end

procedure rPolygon(cx,cy,radius,vertices,skips)

  local theta, incr, xprev, yprev, x, y

  # By default don't skip points
  /skips := 1

  # Current position
  theta := 0

  # Angle between points
  incr := skips * 2 * &pi / vertices

  # First point
  xprev := cx + radius * cos(theta)
  yprev := cy + radius * sin(theta)

  every 1 to vertices do {

    # Update angle
    theta +:= incr

    # Next point
    x := cx + radius * cos(theta)
    y := cy + radius * sin(theta)

    # Line between points
    DrawLine(xprev,yprev,x,y)

    # Save last point
    xprev := x ; yprev := y

  }

  return

end

procedure spokes(cx,cy,radius,n)

  local theta, incr, points

  # Calculate angle
  theta := 0
  incr := 2 * &pi / n

  # Collect pairs of points
  points := []
  every 1 to n do {
    put(points,cx,cy)
    put(points,cx + radius * cos(theta),cy + radius * sin(theta))
    theta +:= incr
  }

  # Draw lines
  DrawSegment ! points

  return

end

procedure checkerboard()

  local size, edge, offset, squares, i, j, sqSize, offEdge, sqEdge

  size := 11 ; edge := 4 ; offset := 170 ; squares := 8

  every i := 0 to squares - 1 do {

    every j := 0 to squares - 1 do {

      # Squares in row
      if (i + j) % 2 = 1 then {
        FillRectangle(offset + i * size, offset + j * size, size, size)
      }

    }

  }

  # Board size
  sqSize := squares * size

  # Top left
  offEdge := offset - edge

  # Size with border
  sqEdge := sqSize + 2 * edge

  # Inner border
  DrawRectangle(offset,offset,sqSize,sqSize)

  # Outer border
  DrawRectangle(offEdge,offEdge,sqEdge,sqEdge)

  return

end

procedure triangles()

  local v, leftX, midX, topY, botY, rightX, offset

  # Positions of left and top vertices
  v := [200,220,240,260]
  offset := 220

  # Draw triangles
  every leftX := !v do {

    midX := leftX + 15

    # Column of triangles
    every topY := !v do {

      botY := topY + 30
      rightX := leftX + 30

      # Connect points
      DrawPolygon(midX + offset, topY,
                  leftX + offset, botY,
                  rightX + offset, botY)

    }

  }

  return

end

procedure wheel(cx,cy,radius,n,hubradius,tirewidth,rimwidth)

  local i, tireradius

  # Draw spokes and inner circle
  spokes(cx,cy,radius,n)
  DrawCircle(cx,cy,radius)

  # Middle circle
  FillCircle(cx,cy,hubradius)

  # Tire and rim
  tireradius := radius + rimwidth
  every i := 0 to tirewidth - 1 do {
    DrawCircle(cx,cy,tireradius + i)
  }

  return

end

procedure eggs()

  local x, y, p4

  p4 := &pi / 4

  every y := 180 | 220 do {

    every x := 675 to 775 by 25 do {

      DrawCircle(

        # Bottom
        x, y, 10, 0.0, &pi,

        # Left part
        x + 10, y, 20, &pi, p4,

        # Top
        x, y - 10, 6, 5 * p4, &pi / 2,

        # Right
        x - 10, y, 20, 7 * p4, p4)

    }

  }

  return

end

procedure aStar(cx,cy,radius,vertices,ecc)

  local acr, x, y, r, kappa, theta, extent

  # Eccentricity
  if ecc < 0.1 then {
    ecc := 0.1
  }

  # Half of angle between points
  kappa := &pi / vertices

  # Radius to small circle center
  acr := radius / (ecc * cos(kappa))

  # Vertical
  x := acr - radius * cos(kappa)

  # Horizontal
  y := radius * sin(kappa)

  # Calculate radius of small circle
  r := sqrt(y^2 + x^2) + 0.5

  # Angle of drawn part
  extent := 2 * atan(y,x)

  # Initial angle
  theta := &pi / 2

  # Draw part of circles around main circle
  every 1 to vertices do {

    # Arc center
    x := cx + acr * cos(theta)
    y := cy + acr * sin(theta)

    # Draw arc
    DrawCircle(x,y,r,theta + &pi - extent / 2,extent)

    # New angle
    theta +:= 2 * kappa

  }

  return

end

procedure arcRect()

  # Rectangle
  DrawRectangle(535,260,100,50)

  # Top left to right down
  DrawLine(535,260,635,310)

  # Down left to right up
  DrawLine(535,310,635,260)

  # Arc inside
  DrawArc(535,260,100,50,&pi/4,&pi)

  return

end

procedure bali()

  local y, w

  # Clear screen
  EraseArea()

  # Initial position and line width
  y := 165 ; w := 1

  every 1 to 9 do {

    # Set line width
    WAttrib("linewidth=" || w)

    # Draw wave
    DrawLine(50,y,600,y)

    # Lower lines are thicker
    y +:= 2 * w + 1
    w +:= w / 3 + 1

  }

  WAttrib("linewidth=4")

  # Sun
  DrawCircle(150,140,50,&pi/6,-4*&pi/3)

  return

end

procedure highway()

  EraseArea()

  WAttrib("linewidth=3")

  # Main road
  Fg("light gray")
  FillRectangle(0,50,500,160)

  # Black lines on main road
  Fg("black")
  DrawLine(0,126,500,126)
  DrawLine(0,134,500,134)

  # Striped lines on main road
  WAttrib("linestyle=striped")
  DrawLine(0,88,500,88)
  DrawLine(0,172,500,172)

  # Side road that covers part of lines on main road
  Fg("light gray")
  FillRectangle(120,50,80,250)

  # Lines on side road
  Fg("black")
  WAttrib("linestyle=dashed")
  DrawLine(160,210,160,300)

  return

end

procedure revDraw()

  local x

  EraseArea()

  DrawLine(50,50,50,150)

  Fg("blue")

  WAttrib("drawop=reverse")
  every x := 1 to 100 do {

    # Draw rectangle first time
    FillRectangle(x, 100, 10, 20)

    WDelay(30)

    # Drawing figure twice erases it
    FillRectangle(x, 100, 10, 20)

  }

  FillRectangle(x, 100, 10, 20)

  # Normal mode
  WAttrib("drawop=copy")

  return

end

procedure recDes()

  local x, rs

  Fg("blue")
  every x := 60 to 88 by 4 do {
    rs := 180 - 2 * x
    DrawRectangle(x, x, rs, rs)
  }

  return

end

procedure pretzels()

  local x, y

  EraseArea()

  WAttrib("linewidth=4")

  every x := 70 to 670 by 100 do {
    every y := 60 to 240 by 60 do {
      WAttrib("dx=" || x, "dy=" || y)
      DrawCurve(20, -20, -5, 0, 20, 20, 35, 0,0,-20,-35,0,-20,20,5,0,-20,-20)
    }
  }

  WAttrib("dx=0","dy=0")

  return

end

procedure clipping()

  local x, y

  EraseArea()

  # Frame and clipped area
  DrawRectangle(20,20,360,260)
  Clip(21,21,359,259)

  every 1 to 50 do {

    # Random position
    x := ?400 ; y := ?400

    # Black line
    WAttrib("fg=black","linewidth=5")
    DrawCircle(x,y,30)

    # White line inside
    WAttrib("fg=white","linewidth=3")
    DrawCircle(x,y,30)

  }

  # Turn off clipping
  Clip()

  return

end

procedure drawing()

  local rs

  # Open window
  WOpen("size=920,400")

  # Draw points
  DrawPoint(10,10,20,10,30,10,40,10)

  # Sierpinski triangle
  # Fg("orange")
  # sierpinski()

  # Purple line
  Fg("purple")
  DrawLine(60,10,120,40)

  # Regular red polygon
  Fg("red")
  rPolygon(200,80,60,7)

  # Star
  Fg("blue")
  rPolygon(330,80,60,7,4)

  # Draw connected lines to form triangle
  Fg("green")
  DrawLine(400,30,450,130,500,80,400,30)

  # Lines between pairs of points
  DrawSegment(10,20,30,50,50,40,30,80)

  # Spokes
  spokes(80,200,60,20)

  # Rectangle design
  recDes()

  # Normal circle
  Fg("purple")
  DrawCircle(560,70,45)

  # Checkerboard
  checkerboard()

  # Filled triangle
  # Polygon is closed automatically
  Fg("red") ; FillPolygon(290,180,320,260,400,200)

  # Triangles
  Fg("blue") ; triangles()

  # Even-odd rule
  Fg("orange") ; FillPolygon(540,200,640,200,590,250,590,150,640,250)

  # Part of circle
  FillCircle(670,70,45,&pi,&pi/2)

  # Wheel
  Fg("blue") ; wheel(770,80,50,30,8,5,11)

  # Eggs
  eggs()

  # Arched star
  Fg("purple") ; aStar(850,200,50,8,1.5)

  # Arc inside rectangle
  arcRect()

  # Smooth curve
  Fg("red") ; DrawCurve(680,260,780,260,680,310,780,310)

  # Bali
  # bali()

  # Highway
  # highway()

  # Reversible drawing
  # revDraw()

  # Draw rectangle on triangle and restore original mode
  WAttrib("drawop=reverse")
  FillRectangle(290,200,30,30)
  WAttrib("drawop=copy")

  # Translate coordinates
  WAttrib("dx=20", "dy=300")
  FillRectangle(0,0,10,10)
  WAttrib("dx=0", "dy=0")

  # Pretzels
  # pretzels()

  # Restrict drawing area
  # clipping()

  # Press 'q'
  WDone()

  return

end

# ---------------------------------------------------------

procedure randomWalk()

  every 1 to 9999 do {

    # Move forward
    TDraw(1)

    # Turn right
    TRight(?61 - 31)

  }

  return

end

procedure spiralFigure()

  local angle, incr, side

  # Random angle
  angle := 30 + ?149

  # Side length change
  incr := sqrt(4 * ?0) + 0.3

  # Initialize side
  side := 0

  while side < 270 do {

    # Draw line and turn right
    TDraw(side +:= incr)
    TRight(angle)

  }

  return

end

procedure bush(n,len)

  # Save current position and direction on stack
  TSave()

  # Turn right and draw
  TRight(?71 - 36)
  TDraw(?len)

  if n > 0 then {

    # Draw lines recursively
    every 1 to ?4 do {
      bush(n - 1,len)
    }

  }

  # Restore position
  TRestore()

  return

end

procedure lsystem()

  local rewrite, line, keyword, value, c, current_string, new_string,
        axiom, angle, length, gener, f

  # Table with rewrite rules
  rewrite := table()

  # File with penrose tiling rule
  f := open("penrose.txt")

  # Read rules and properties from file
  while line := read(f) do {

    line ? {

      # Rule
      if c := tab(find("->")) then {

        # Skip arrow
        move(2)

        # Save rule
        rewrite[c] := tab(0)

      # Property
      } else if keyword := tab(find(":")) then {

        # Skip colon
        move(1)

        # Read value
        value := tab(0)

        # Save property
        case keyword of {

          "axiom": {
            axiom := value
          }

          "angle": {
            angle := real(value) | stop("*** invalid line: ", line)
          }

          "length": {
            length := integer(value) | stop("*** invalid line: ", line)
          }

          "gener": {
            gener := integer(value) | stop("*** invalid line: ", line)
          }

          default: {
            stop("*** erroneous keyword: ", line)
          }

        }

      # Error
      } else {
        stop("*** invalid line: ", line)
      }

    }

  }

  # Close file
  close(f)

  # Default values
  /length := 5 ; /gener:= 3

  # Required values
  if /axiom then stop("*** no axiom specified ")
  if /angle then stop("*** no angle specified ")

  # Read generated characters
  every c := lindgen(!axiom, rewrite, gener) do {

    case c of {
      "F": TDraw(length)
      "f": TSkip(length)
      "+": TRight(angle)
      "-": TLeft(angle)
      "[": TSave()
      "]": TRestore()
    }

  }

  return

end

procedure lindgen(c, rewrite, gener)

  local s

  # Return character in last generation
  if gener = 0 then {

    return c

  # Recursive call
  } else if s := \rewrite[c] then {

    suspend lindgen(!s, rewrite, gener - 1)

  # Character without rewrite rule
  } else {
    return c
  }

end

procedure turtle()

  local n

  randomize()

  # Turtle random walk
  # randomWalk()

  # Random figure
  # spiralFigure()

  # Tree
  # TSkip(-120)
  # bush(n := 4 + ?4,300/n)

  # L-system
  lsystem()

  WDone()

  return

end

# ---------------------------------------------------------

procedure ransom(s)

  local c
  static famlist, attlist

  initial {

    # Attributes
    attlist := ["", "", "bold", "italic"]

    # Fonts
    # famlist:= [
    #   "AvantGarde", "Bookman", "Charter", "Courier", "Gill Sans",
    #   "Helvetica", "Lucida Bright", "Lucida Sans",
    #   "New Century Schoolbook", "Palatino", "Rockwell", "Times"
    # ]

    # Portable fonts
    famlist:= ["mono","typewriter","sans","serif"]

  }

  # Set font and write letter in window
  every c := !s do {
    Font(?famlist || ",24," || ?attlist)
    WWrites(c)
  }

  return

end

procedure readLoop()

  repeat {

    WWrites("command? ")

    case WRead() of {
      "quit": exit()
      "continue": break
      "erase": EraseArea()
    }

  }

  WWrite("Function \'continue\' was selected")

  return

end

procedure flashText()

  WAttrib("drawop=reverse")

  # Wait for key press
  until *Pending() > 0 do {

    # Show
    DrawString(10, 10, "Wake up!")
    WDelay(500)

    # Erase
    DrawString(10, 10, "Wake up!")
    WDelay(200)

  }

  return

end

procedure text()

  # New window
  WOpen("size=400,400")

  # Command line in window
  # readLoop()

  # Change text position (row and column)
  GotoRC(5,20)
  WWrite("Text position changed. Current position: ",
    WAttrib("row"), " - ", WAttrib("col"))

  # Set exact text position
  GotoXY(100,200) ; WWrite("100x100")

  # Make cursor visible
  WAttrib("cursor=on")

  # Letters in random fonts
  # ransom("The following procedure shows how fonts can be used to produce whimsical output")

  # Show current font
  write("Current font: ",Font())

  # Width of displayed text
  write("Width: ",TextWidth("character width multiplied"))

  # Draw string
  DrawString(300,100,"Hello")

  # Blinking text
  # flashText()

  WDone()

  return

end

# ---------------------------------------------------------

procedure color()

  local cNames, x, i, planes

  WOpen("size=400,400")

  # Color names and numerical specifications
  cNames := ["pale blue","greenish blue","bluish green","violetish red",
             "#ffaa05","32000,0,0", "1000,15000,200", "45000,25000,15000",
             "orangish red"]

  # Colorful rectangles
  i := 0
  every x := 100 to 450 by 50 do {
    Fg(cNames[i+:=1])
    FillRectangle(x,50,40,80)
  }

  # Color specification
  write("RGB: ",ColorValue(cNames[9]))
  Fg(cNames[9]) ; FillRectangle(100,150,40,40)

  # Gamma parameter
  write("Gamma correction: ",WAttrib("gamma"))

  # Number of planes supported by graphics hardware
  planes := WAttrib("depth")
  write("Planes: ",planes,"(",2^planes," colors)")

  # Define mutable color
  # mc := NewColor("red")
  # write("Negative integer: ",mc)

  WDone()

  return

end

# ---------------------------------------------------------

procedure spheres()

  local sphere, x, y

  # Define shpere
  sphere := "16,g16,FFFFB98788AEFFFF" ||
    "FFD865554446AFFF FD856886544339FF E8579BA9643323AF" ||
    "A569DECA7433215E 7569CDB86433211A 5579AA9643222108" ||
    "4456776533221007 4444443332210007 4333333222100008" ||
    "533322221100000A 822222111000003D D41111100000019F" ||
    "FA200000000018EF FFA4000000028EFF FFFD9532248BFFFF"

  # Random number generator
  randomize()

  # Columns
  every x := 20 to 460 by 20 do {

    y := 290

    # Draw column of spheres
    every 1 to ?17 do {
      DrawImage(x, y -:= 16, sphere)
    }

  }

  return

end

procedure necktie()

  local points

  points := [690, 50, 710, 50, 720, 20, 680, 20,
             690,50,670,280,700,320,730,280,710,50]

  # Set new pattern
  Pattern("4,#8CA9")

  # Draw polygon
  WAttrib("fillstyle=textured")
  FillPolygon ! points

  # Outline
  WAttrib("fillstyle=solid")
  DrawPolygon ! points

  return

end

procedure images()

  local code, p, colors, grays, c

  # New window
  WOpen("size=800,400")

  # Draw spheres
  spheres()

  # Entry in the pallette that is close to given color
  code := PaletteKey("g16", "red")
  write("Close to red in g16: ",code)

  # RGB values
  write("RGB: ",PaletteColor("g16",code))

  # Characters
  write("Palette characters: ",PaletteChars("g16"))

  # Small letter 'N'
  DrawImage(500,50,"5,#1113151911")

  # Set pattern
  Pattern("grains")

  # Draw only pixels from pattern
  WAttrib("fillstyle=masked")
  FillRectangle(500,70,50,50)

  # Draw all pixels
  Pattern("trellis")
  WAttrib("fillstyle=textured")
  FillRectangle(560,70,50,50)

  # Draw necktie with pattern
  necktie()

  # Create colors list
  # Collect rgb values for every character in palette
  p := "g16" ; colors := []
  every put(colors, PaletteColor(p, !PaletteChars(p)))

  # Omit grays
  colors := [] ; grays := PaletteGrays(p)
  every c := !PaletteChars(p) do {

    # Add color if it is not gray
    if not (grays ? upto(c)) then {
      put(colors, PaletteColor(p,c))
    }

  }

  # All colors in palette are grays
  if 0 = *colors then write("Color list is empty")

  WDone()

  return

end

# ---------------------------------------------------------

procedure meltdown()

  local ww, wh, w, x, y, h, yh

  # Window dimensions
  ww := integer(WAttrib("width"))
  wh := integer(WAttrib("height"))

  # Loop
  every 1 to 500 do {

    # Width of copied area
    w := ?ww

    # Horizontal position
    x := ?(ww + 2 * w) - w

    # Bottom of copied area
    y := ?wh

    # Area height
    h := ?y

    # Vertical position
    yh := y - h

    # Copy area 1 pixel lower
    CopyArea(x, yh, w, h, x, yh + 1)

  }

  return

end

procedure scroll(win, image_file)

  local ww, wh, img, x, y, w, h

  # Window width and height
  ww := WAttrib(win, "width")
  wh := WAttrib(win, "height")

  # Open window with image on hidden canvas
  img := WOpen("image=" || image_file , "canvas=hidden") | fail

  # Image width and height
  w := WAttrib(img, "width")
  h := WAttrib(img, "height")

  # Initial position
  x := y := 0

  # Events
  repeat {

    # Copy image from hidden canvas to window
    CopyArea(img, &window, x, y, w, h, 0, 0)

    # Change position
    case Event() of {
      "l": if x > 0 then x -:= 1
      "r": if x + ww < w then x +:= 1
      "u": if y > 0 then y -:= 1
      "d": if y + wh < h then y +:= 1
      "q": break
    }

  }

  # Close window
  WClose(img)

  return

end

procedure patternfill(win, pat)

  # Set current pattern
  Pattern(win, pat) | fail

  # Draw rectangle
  WAttrib(win, "fillstyle=textured")
  FillRectangle(win)
  WAttrib(win, "fillstyle=solid")

  # Draw five circles
  every DrawCircle(win,0,0,10 to 50 by 10)

  # Write pattern name
  WWrite(win, pat)

  return

end

procedure MSubWindow(win, x, y, w, h)

  # Clone window and set its offset
  win := Clone(win, "dx=" || (WAttrib(win, "dx") + x),
                    "dy=" || (WAttrib(win, "dy") + y))

  # Restrict drawing
  Clip(win,0,0,w, h)

  # Go to first row and column
  GotoRC(win,1,1)

  # Return cloned window
  return win

end

procedure subwindows()

  local w1, w2, w3, w4

  # Set initial text position
  GotoRC(&window,1,1)

  # Fill entire window
  # Draw circles and pattern name
  patternfill(&window,"verylight")

  # Create and draw other windows
  w1 := MSubWindow(&window,80,50,150,80)
  patternfill(w1,"grains")
  w2 := MSubWindow(&window,50,180,150,80)
  patternfill(w2,"waves")
  w3 := MSubWindow(&window,300,30,150,200)
  patternfill(w3,"gray")

  # Small window w4 inside w3
  w4 := MSubWindow(w3,50,60,80,80)
  patternfill(w4,"trellis")

  return

end

procedure windows()

  local alert, win1, win2, win3, win4, win5, win6, choices

  # Open window
  alert := WOpen("size=300,500") | stop(,"*** cannot open alert window")

  # Draw in window
  Fg("red") ; FillRectangle(alert,100,100,20,40)

  # Draw in subject
  FillCircle(&window,150,120,20)

  # Wait
  # WDelay(1000)

  # Close window
  WClose()

  # Open 2 windows
  win1 := WOpen("size=200,100", "fg=red", "font=mono","label=First Canvas")
  win2 := WOpen("size=350,200", "fg=blue", "font=serif")

  # Window with canvas from win1 and copy of
  # graphic context from win2 (except font)
  win3 := Clone(win1, win2, "font=sans")

  # Write in first window
  WWrite(win1,"Canvas 1") # red
  WWrite(win3, "A selection of choices follows") # blue

  # Red choices
  choices := ["one","two","three"]
  every WWrite(win1," ", !choices)

  # Second window
  WWrite(win2,"Window 2")

  # Canvas and copy of attributes from win1
  win4 := Clone(win1,"fg=blue")
  WWrite(win4,"Window 4")

  # Canvas from win5 and reference to graphics context from win4
  win5 := WOpen("size=320,200","font=serif")
  win6 := Couple(win5,win4)

  # Graphics context is modified in win4
  Fg(win4,"red")
  WWrite(win6,"Red")

  # The same graphics context
  Fg(win6,"green")
  WWrite(win6,"Green")

  # Display canvases and graphics contexts serial numbers and labels
  write(image(win1)) ; write(image(win2))
  write(image(win3)) ; write(image(win4))
  write(image(win5)) ; write(image(win6))

  # Draw in default canvas
  Fg("purple") ; FillRectangle(200,10,40,40)

  # Set canvas state (hidden, iconic, maximal)
  # WAttrib("canvas=maximal")

  # Screen dimensions
  write("Width & Height: ",WAttrib("displaywidth")," ",WAttrib("displayheight"))

  # Copy area to another canvas
  CopyArea(win1,win2,0,0,100,100,150,50)

  # Copy in the same canvas
  CopyArea(win2,150,50,100,100,20,40)

  # Generate pixel colors from area
  # every write(Pixel(0,0,8,8))

  # Image meltdown
  # meltdown()

  # Scroll image in window
  # scroll(win1,"image.gif")

  # Create subwindows
  subwindows()

  WDone()

  return

end

# ---------------------------------------------------------

procedure paint()

  local x, y

  repeat {

    case Event() of {

      # Point
      &lpress: {
        DrawPoint(&x, &y)
        x := &x
        y := &y
      }

      # Line
      &ldrag: {
        DrawLine(x, y, &x, &y)
        x := &x
        y := &y
      }

      # Erase
      &rpress | &rdrag: {
        EraseArea(&x - 2, &y - 2,5,5)
      }

      "q": exit()

    }

  }

  return

end

procedure showEvents()

  local e

  # Show all events
  repeat {

    # Read event
    e := Event()

    # Newline
    WWrites("\n ")

    # Modifier keys
    WWrites(if &control then "C" else "_")
    WWrites(if &shift then "s" else "_")
    WWrites(if &meta then "m" else "_")

    # Event name, position and time since previous event
    WWrites(" ", left(image(e), 6), "", left("(" || &x || "," || &y || ")", 11),
            right(&interval, 6), " msec.")

  }

  return

end

procedure circlePointer()

  local p, x, y, r, px, py

  p := WAttrib("pointer")

  # Circle position
  x := WAttrib("width") / 2
  y := WAttrib("height") / 2

  # Radius
  r := WAttrib("height") / 5

  # Circle
  DrawCircle(x,y,r)

  until *Pending() > 0 & Event() === "q" do {

    # Read pointer position
    px := WAttrib("pointerx")
    py := WAttrib("pointery")

    # Inside
    if (px - x) ^ 2 + (py - y) ^ 2 < r ^ 2 then {
      WAttrib("pointer=cross")

    # Outside
    } else {
      WAttrib("pointer=" || p)
    }

    WDelay(10)

  }

  return

end

procedure interaction()

  # Open new window
  WOpen("size=640,480") | stop("*** cannot open window")

  # Draw on canvas
  # paint()

  # Show information about events
  # showEvents()

  # Configure mouse pointer
  # WAttrib("pointer=watch")

  # Produce dialog
  # Notice("The file you specified does not exist.")

  # Pointer inside circle
  circlePointer()

  return

end

# ---------------------------------------------------------

procedure interface()

  # Buttons
  # Radio buttons
  # Menus
  # Text-entry fields
  # Sliders
  # Scrollbars
  # Text lists
  # Regions
  # Labels
  # Lines
  # Callbacks

  return

end

# ---------------------------------------------------------

procedure visual()

  # Planning the Interface
  # Visual Interface Builder
  # VIB Menus
  # VIB Output

  return

end

# ---------------------------------------------------------

procedure init()
  
  # Random number generator
  randomize()

  # Create widget table
  vidgets := ui()

  # Save root widged and width of region usable area
  root := vidgets["root"]
  size := vidgets["region"].uw

  # Region must be square
  if vidgets["region"].uh ~= size then {
    stop("*** improper interface layout")
  }

  # Set variables
  delay := 0
  density := DensityMax / 2.0
  max_radius := SliderMax
  min_radius := SliderMin
  scale_radius := (size / 4) / SliderMax
  draw_proc := FillCircle

  # Initialize color palette
  colors := []
  every put(colors, PaletteColor("c1", !PaletteChars("c1")))

  # Pause vidget
  pause := vidgets["pause"]

  # Set vidget states
  VSetState(vidgets["density"], (density / DensityMax) * SliderMax)
  VSetState(vidgets["delay"], delay)
  VSetState(vidgets["min_radius"], min_radius)
  VSetState(vidgets["max_radius"], max_radius)
  VSetState(vidgets["shape"], "discs")

  # Clone display area to create new graphics context on the same canvas
  # Set region position and reversible drawing mode
  half := size / 2
  pane := Clone("bg=black", "dx=" || (vidgets["region"].ux + half),
    "dy=" || (vidgets["region"].uy + half), "drawop=reverse")

  # Clip area to prevent drawing outside region
  Clip(pane, -half, -half, size, size)

  return

end

procedure kaleidoscope()

  # Main loop
  repeat {

    # Clear display and reset variables
    EraseArea(pane, -half, -half, size, size)
    draw_list := []
    reset := &null

    # Inner loop
    repeat {

      # Process events or wait
      while (*Pending() > 0) | \VGetState(pause) do {

        ProcessEvent(root, , shortcuts)

        # Break inner loop to clear display
        if \reset then {
          break break next
        }

      }

      # Add new circle
      putcircle()

      # Wait
      WDelay(delay)

      # Delete oldest circle
      if *draw_list > density then {
        clrcircle()
      }

    }

  }

end

procedure putcircle()

  local off1, off2, radius, color

  # Random position and radius
  off1 := ?size % half
  off2 := ?size % half
  radius := ((max_radius - min_radius) * ?0 + min_radius) * scale_radius
  radius <:= 1

  # Select color
  color := ?colors

  # Add circle to list
  put(draw_list, circle(off1, off2, radius, color))

  # Draw circle
  outcircle(off1, off2, radius, color)

  return

end

procedure clrcircle()

  local circle

  # Remove circle from list
  circle := get(draw_list)

  # Draw circle second time to erase it
  outcircle(circle.off1, circle.off2, circle.radius, circle.color)

  return

end

procedure outcircle(off1, off2, radius, color)

  # Set foreground color
  Fg(pane, color)

  # Draw shape using function draw_proc
  draw_proc(pane, off1, off2, radius)
  draw_proc(pane, off1, -off2, radius)
  draw_proc(pane, -off1, off2, radius)
  draw_proc(pane, -off1, -off2, radius)
  draw_proc(pane, off2, off1, radius)
  draw_proc(pane, off2, -off1, radius)
  draw_proc(pane, -off2, off1, radius)
  draw_proc(pane, -off2, -off1, radius)

  return

end

procedure density_cb(vidget, value)

  # Set density
  density := (value / SliderMax) * DensityMax
  density <:= 1
  reset := 1

end

procedure delay_cb(vidget, value)

  # Configure delay
  delay := value * 200

  return

end

procedure file_cb(vidget, value)

  # File menu
  case value[1] of {
    "snapshot @S": snapshot(pane, -half, -half, size, size)
    "quit @Q" : exit()
  }

  return

end

procedure max_radius_cb(vidget, value)

  # Set max radius
  max_radius := value

  # Adjust min radius
  if max_radius < min_radius then {
    min_radius := max_radius
    VSetState(vidgets["min_radius"], min_radius)
  }

  reset := 1

  return

end

procedure min_radius_cb(vidget, value)

  # Set min radius
  min_radius := value

  # Adjust max radius
  if min_radius > max_radius then {
    max_radius := min_radius
    VSetState(vidgets["max_radius"],max_radius)
  }

  reset := 1

  return

end

procedure reset_cb(vidget, value)

  # Enable reset
  reset := 1

  return

end

procedure shape_cb(vidget, value)

  # Select shape
  draw_proc := case value of {
    "discs": FillCircle
    "rings": DrawCircle
  }

  reset := 1

  return

end

procedure shortcuts(e)

  # Keyboard shortcuts (alt key)
  if &meta then {
    case map(e) of {
      "q": exit()
      "s": snapshot(pane, -half, -half, size, size)
    }
  }
    
  return

end

#===«vib:begin»=== modify using vib; do not remove this marker line
procedure ui_atts()

  # Create list with window attributes  
  return ["size=600,455","bg=pale gray","label=kaleido"]

end

procedure ui(win, cbk)

  # Create widgets and assign callbacks
  return vsetup(win, cbk,
    [":Sizer:::0,0,600,455:kaleido",],
    ["delay:Slider:h:1:42,120,100,15:1.0,0.0,0.0",delay_cb],
    ["density:Slider:h:1:42,180,100,15:0.0,10.0,10.0",density_cb],
    ["file:Menu:pull::12,3,36,21:File",file_cb,["snapshot @S","quit @Q"]],
    ["label01:Label:::13,180,21,13:min",],
    ["label02:Label:::152,180,21,13:max",],
    ["label03:Label:::13,240,21,13:min" ,],
    ["label04:Label:::152,240,21,13:max",],
    ["label05:Label:::13,300,21,13:min",],
    ["label06:Label:::152,300,21,13:max",],
    ["label07:Label:::7,120,28,13:slow",],
    ["label08:Label:::151,120,28,13:fast",],
    ["lbl_density:Label:::67,160,49,13:density",],
    ["lbl_max_radius:Label:::43,280,98,13:maximum radius",],
    ["lbl_min_radius:Label:::44,220,98,13:minimum radius",],
    ["lbl_speed:Label:::74,100,35,13:speed",],
    ["line:Line:::0,30,600,30:",],
    ["max_radius:Slider:h:1:42,300,100,15:0.0,10.0,10.0",max_radius_cb],
    ["min_radius:Slider:h:1:42,240,100,15:0.0,10.0,1.0",min_radius_cb],
    ["pause:Button:regular:1:33,55,45,20:pause",],
    ["reset:Button:regular::111,55,45,20:reset",reset_cb],
    ["shape:Choice::2:66,359,64,42:",shape_cb,["discs","rings"]],
    ["region:Rect:raised::188,42,400,400:",],
    )

end
#==<<vib:end>>=== end of section maintained by vib

procedure application()

  # Initialize variables
  init()

  # Run application
  kaleidoscope()

  return

end

# ---------------------------------------------------------

procedure dialog()

  # Dialogs:
  #  Text
  #  Selection
  #  Toggle
  #  Color
  #  Custom
  #  Hidden

  return

end

# ---------------------------------------------------------

procedure pattern()

  return

end

# ---------------------------------------------------------

procedure caricature()

  return

end

# ---------------------------------------------------------

procedure main()

  # icon()
  # graphics()
  # drawing()
  # turtle()
  # text()
  # color()
  # images()
  # windows()
  # interaction()
  # interface()
  # visual()
  # application()
  dialog()

end

# ---------------------------------------------------------
