# ---------------------------------------------------------

link graphics

# ---------------------------------------------------------

# Graphics Programming in Icon

# ---------------------------------------------------------

# Redefine name
$define Margin 1
$ifdef Margin
  $undef Margin
  $define Margin 2
$endif

record testr(a,b,c,d)

# ---------------------------------------------------------

procedure greet(name)
  write("Hi there!")
  write("My name is ", name, ".")
  return
end

procedure shuffle(X)

  local i

  every i := *X to 2 by -1 do {
    X[?i] :=: X[i]
  }

  return X

end

procedure icon()

  local lst, r

  # Procedure call
  greet("George")

  # Argument list
  lst := [1,2,3,4]
  write ! lst

  # Show defined value
  write("Margin: ",Margin)

  # Shuffle record fields
  r := testr(1,2,3,4)
  shuffle(r)
  write("Record: ",r.a,r.b,r.c,r.d)

  return

end

# ---------------------------------------------------------

procedure rectangles()

  local width, height, x, y, w, h, colors, rect

  width := 500 ; height := 300
  colors := ["red", "blue", "green", "yellow", "purple", "white", "black"]
  rect := [FillRectangle, DrawRectangle]

  write("Event processing started")

  repeat {

    w := ?width
    h := ?height
    x := ?width - w / 2
    y := ?height - h / 2

    # Set random color
    Fg(?colors)

    # Random rectangle
    (?rect)(x, y, w, h)

    # Wait for events
    WDelay(300)

    # Process events
    while *Pending() > 0 do {

      case Event() of {

        # Hold down left mouse button to pause drawing rectangles
        &lpress: {
          until Event() === &lrelease
          write("Left mouse button released")
        }

        "q": exit()

      }

    }

  }

  write("Event processing complete")

  return

end

procedure graphics()

  local normal

  # Open 400x300 (width x height) pixel window
  # Background color is light gray
  WOpen("label=Graphics","size=400,300","bg=light gray")

  # Set colors and line width
  # Enable window resizing
  WAttrib("fg=white","bg=black","linewidth=4","resize=on")
  Fg("red") ; Bg("black")

  # Show foreground color
  write("Foreground: ",WAttrib("fg"))

  # Display text inside window
  WWrite("Hello World!")

  # Draw red rectangle
  DrawRectangle(20,30,200,100)

  # Store attributes in list
  normal := ["bg=white", "fg=orange"]

  # Set attributes using list
  WAttrib ! normal

  # Blue rectangle
  FillRectangle(250,40,70,70)

  # Fill rectangle with background color
  Bg("black")
  EraseArea(250,40,40,40)

  # Two rectangles
  Fg("green")
  DrawRectangle(80,150,60,60,
                100,160,70,70)

  # Synchronize
  # WSync()

  # Wait 5 seconds
  WDelay(5000)

  # Rectangles
  rectangles()

  # Wait for 'q'
  write("Press 'q' to quit")
  WDone()

  return

end

# ---------------------------------------------------------

procedure drawing()

  WOpen("size=400,300")

  # Draw points
  DrawPoint(10,20,12,22,14,24,16,26)

  # Green line
  Fg("green")
  DrawLine(10,10,40,40)

  # Lines between points
  Fg("red")
  DrawSegment(50,50,60,60,70,70,80,80)

  # Rectangle
  DrawRectangle(110,30,50,50)

  # Circle
  Fg("purple")
  DrawCircle(135,55,45)

  # Triangle
  DrawLine(200,50,250,150,300,100,200,50)

  # Filled triangle
  FillPolygon(300,50,350,150,400,100,300,50)

  # Arc
  DrawArc(420,20,50,100,&pi/4,&pi)

  # Reversible drawing
  WAttrib("drawop=reverse")
  every x := 1 to 100 do {

    # Draw rectangle first time
    FillRectangle(x, 100, 10, 20)

    WDelay(1)

    # Drawing figure twice erases it
    FillRectangle(x, 100, 10, 20)

  }

  FillRectangle(x, 100, 10, 20)

  # Set Offset
  # WAttrib("dx=60", "dy=60")

  # Restrict drawing
  # Clip(0,0,20,20)

  # Press 'q'
  WDone()

  return

end

# ---------------------------------------------------------

procedure turtle()

  return

end

# ---------------------------------------------------------

procedure main()

  # icon()
  graphics()
  # drawing()

end

# ---------------------------------------------------------
